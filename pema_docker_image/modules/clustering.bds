#!/usr/bin/env bds

# Function to get OTUs using the VSEARCH algorithm
string{} clusteringVsearch(string{} params, string{} globalVars) {

      
      #### Prepare files
      globalVars{'outputFilePath'}.chdir()
      globalVars{'vsearchPath'} = globalVars{'genePath'} + '/' + params{'gene'} +  '/' + 'vsearch'
      task sed 's/_/;size=/g' final_all_samples.fasta > $globalVars{'vsearchPath'}/all_samples.fasta
      
      wait

      ######################  Execute the VSEARCH algorithms    #############################################
            
      globalVars{'vsearchPath'}.chdir()
      
      # Demultiplexing
      task $globalVars{'path'}/tools/VSEARCH/vsearch-2.9.1-linux-x86_64/bin/vsearch \
         --threads $params{'vsearchThreads'} \
         --derep_fulllength all_samples.fasta \
         --minuniquesize 2 --sizein --sizeout --fasta_width 0 \
         --uc all.derep.uc \
         --output all.derep.fasta
      
      wait
      
      # Execute the first clustering step
      task $globalVars{'path'}/tools/VSEARCH/vsearch-2.9.1-linux-x86_64/bin/vsearch \
         --threads $params{'vsearchThreads'} \
         --cluster_size all.derep.fasta \
         --id $params{'vsearchId'} \
         --strand both --sizein --sizeout --fasta_width 0 \
         --uc all.preclustered.uc \
         --centroids all.preclustered.fasta
      
      wait

      # Chimera removal
      task $globalVars{'path'}/tools/VSEARCH/vsearch-2.9.1-linux-x86_64/bin/vsearch \
         --threads $params{'vsearchThreads'} \
         --uchime_denovo all.preclustered.fasta \
         --sizein --sizeout --fasta_width 0 \
         --nonchimeras all.denovo.nonchimeras.fasta
      
      wait

      # Change an output file name
      sys mv all.denovo.nonchimeras.fasta all.ref.nonchimeras.fasta
      
      # Here are two perl scripts that are located in the "scripts" folder
      task $globalVars{'path'}/scripts/map_vsearch.pl all.derep.fasta all.preclustered.uc \
         all.ref.nonchimeras.fasta > all.nonchimeras.derep.fasta
      
      wait
   
      task $globalVars{'path'}/scripts/map_vsearch.pl all_samples.fasta \
         all.derep.uc all.nonchimeras.derep.fasta > all.nonchimeras.fasta
      
      wait

      # Execute the second clustering step
      task $globalVars{'path'}/tools/VSEARCH/vsearch-2.9.1-linux-x86_64/bin/vsearch \
         --threads $params{'vsearchThreads'} \
         --cluster_size all.nonchimeras.fasta \
         --id $params{'vsearchId'} \
         --strand both --sizein --fasta_width 0 \
         --uc all.clustered.uc \
         --relabel Otu \
         --centroids all.otus.fasta \
         --otutabout all.otutab.txt
      
      wait
      
      sys mv all.otus.fasta all_samples.otus.fa
      sys mv all.otutab.txt otutab.txt
      sys cp otutab.txt otutab_$params{'taxonomyFolderName'}.txt
      
      wait
      
      println("OTU clustering using the VSEARCH algorithm has been completed.")

   return globalVars

}


string{} clusteringSwarm(string{} params, string{} globalVars) {


   #### Prepare files
   globalVars{'outputFilePath'}.chdir()
   globalVars{'swarmPath'} = globalVars{'genePath'} + '/' + params{'gene'} +  '/' + 'Swarm'
   task cp all_samples.fasta $globalVars{'swarmPath'}/all_samples.fasta
   wait


   globalVars{'swarmPath'}.chdir()
   
   
   int d_param = params{'d'}.parseInt()


   # Here is the clustering step with SWARM algorithm
   if ( d_param == 1 ) {

      swarmDefault(params, globalVars)
      

   } else if (  d_param >= 5  ) {

      task $globalVars{'path'}/tools/swarm/swarm/bin/swarm -d $params{'d'} \
      -t $params{'swarmThreads'} -s asvs.stats \
      -w asvs_representatives_all_samples.fasta < all_samples.fasta > asvs.swarms

   } else {

      task $globalVars{'path'}/tools/swarm/swarm/bin/swarm -d $params{'d'} \
      -t $params{'swarmThreads'} -s asvs.stats \
      -w asvs_representatives_all_samples.fasta < all_samples.fasta > asvs.swarms

   }

   wait
   println('ASVs inference using the Swarm algorithm has been completed')
   
   # Build the ASVs contingency table 
   sys mv ../../../amplicon_contingency_table.tsv .
   sys bash $globalVars{'path'}/scripts/createOtuContingencyTable.sh
   println('The contigency table with the found ASVs was created successfully!')

   return globalVars

}





 string swarmDefault(string{} params, string{} globalVars) {

   task $globalVars{'path'}/tools/swarm/swarm/bin/swarm -d 1 -f -b $params{'boundary'} \
      -t $params{'swarmThreads'} \
      -s asvs_tmp.stats \
      -w asvs_representatives_all_samples_tmp.fasta < all_samples.fasta > asvs_tmp.swarms

   wait

   # Remove chimeras
   task{
      sys sed 's/_/;size=/g' asvs_representatives_all_samples_tmp.fasta > tmp
      sys rm asvs_representatives_all_samples_tmp.fasta
      sys mv tmp asvs_representatives_all_samples_tmp.fasta
   }

   wait

   task $globalVars{'path'}/tools/VSEARCH/vsearch-2.9.1-linux-x86_64/bin/vsearch \
      --threads $params{'vsearchThreads'} \
      --uchime_denovo asvs_representatives_all_samples_tmp.fasta \
      --sizein --sizeout --fasta_width 0 \
      --nonchimeras all.denovo.nonchimeras.fasta

   wait

   # Run swarm using d = 0 to sync the .stats and .swarms files 
   task {
      sys sed 's/;size=/_/g' all.denovo.nonchimeras.fasta > tmp 
      sys rm all.denovo.nonchimeras.fasta
      sys mv tmp all.denovo.nonchimeras.fasta
   }

   wait

   task $globalVars{'path'}/tools/swarm/swarm/bin/swarm -d 0 -t $params{'swarmThreads'} -s asvs.stats -w asvs_representatives_all_samples.fasta < all.denovo.nonchimeras.fasta > asvs.swarms

   wait

   sys rm asvs_representatives_all_samples_tmp.fasta asvs_tmp*

   return 'ok'

}  


string swarmSmallValues(string{} params, string{} globalVars){

   return 'ok'
}

string swarmGreatValues(string{} params, string{} globalVars){

   return 'ok'
}
